/*
 * Нетрика OTRS API
 * Интеграционный профиль системы регистрации запросов на обслуживание OTRS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import java.io.IOException;


import io.swagger.client.model.UpdateTicket;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class _Api {
    private ApiClient apiClient;

    public _Api() {
        this(Configuration.getDefaultApiClient());
    }

    public _Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ticketGet
     * @param ticketID номер тикета (required)
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketGetCall(String ticketID, String userLogin, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/MIAC/TicketGet/{TicketID}"
            .replaceAll("\\{" + "TicketID" + "\\}", apiClient.escapeString(ticketID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userLogin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserLogin", userLogin));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketGetValidateBeforeCall(String ticketID, String userLogin, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketID' is set
        if (ticketID == null) {
            throw new ApiException("Missing the required parameter 'ticketID' when calling ticketGet(Async)");
        }
        
        // verify the required parameter 'userLogin' is set
        if (userLogin == null) {
            throw new ApiException("Missing the required parameter 'userLogin' when calling ticketGet(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling ticketGet(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketGetCall(ticketID, userLogin, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Принимает номер тикета
     * Возвращает JSON объект из 38 полей с информацией о заявке
     * @param ticketID номер тикета (required)
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse ticketGet(String ticketID, String userLogin, String password) throws ApiException {
        return ticketGetWithHttpInfo(ticketID, userLogin, password);
    }

    /**
     * Принимает номер тикета
     * Возвращает JSON объект из 38 полей с информацией о заявке
     * @param ticketID номер тикета (required)
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ticketGetWithHttpInfo(String ticketID, String userLogin, String password) throws ApiException {
        com.squareup.okhttp.Call call = ticketGetValidateBeforeCall(ticketID, userLogin, password, null, null);
        return apiClient.execute(call);
    }

    /**
     * Принимает номер тикета (asynchronously)
     * Возвращает JSON объект из 38 полей с информацией о заявке
     * @param ticketID номер тикета (required)
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketGetAsync(String ticketID, String userLogin, String password, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketGetValidateBeforeCall(ticketID, userLogin, password, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ticketSearch
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @param queues очередь (optional, default to Санкт-Петербург::BI_СПб)
     * @param ticketNumber номер заявки (% маска) (optional, default to 98068%)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketSearchCall(String userLogin, String password, String queues, String ticketNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/MIAC/TicketSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userLogin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserLogin", userLogin));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Password", password));
        if (queues != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Queues", queues));
        if (ticketNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TicketNumber", ticketNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketSearchValidateBeforeCall(String userLogin, String password, String queues, String ticketNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userLogin' is set
        if (userLogin == null) {
            throw new ApiException("Missing the required parameter 'userLogin' when calling ticketSearch(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling ticketSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketSearchCall(userLogin, password, queues, ticketNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Принимает номер тикета и очередь
     * Возвращает JSON объект с массивом тикетов
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @param queues очередь (optional, default to Санкт-Петербург::BI_СПб)
     * @param ticketNumber номер заявки (% маска) (optional, default to 98068%)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @return
     */
    public ApiResponse ticketSearch(String userLogin, String password, String queues, String ticketNumber) throws ApiException {
        return ticketSearchWithHttpInfo(userLogin, password, queues, ticketNumber);
    }

    /**
     * Принимает номер тикета и очередь
     * Возвращает JSON объект с массивом тикетов
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @param queues очередь (optional, default to Санкт-Петербург::BI_СПб)
     * @param ticketNumber номер заявки (% маска) (optional, default to 98068%)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ticketSearchWithHttpInfo(String userLogin, String password, String queues, String ticketNumber) throws ApiException {
        com.squareup.okhttp.Call call = ticketSearchValidateBeforeCall(userLogin, password, queues, ticketNumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * Принимает номер тикета и очередь (asynchronously)
     * Возвращает JSON объект с массивом тикетов
     * @param userLogin логин (required)
     * @param password пароль (required)
     * @param queues очередь (optional, default to Санкт-Петербург::BI_СПб)
     * @param ticketNumber номер заявки (% маска) (optional, default to 98068%)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketSearchAsync(String userLogin, String password, String queues, String ticketNumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketSearchValidateBeforeCall(userLogin, password, queues, ticketNumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ticketUpdate
     * @param json данные тикета, которые нужно изменить (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketUpdateCall(UpdateTicket json, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/MIAC/TicketUpdate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketUpdateValidateBeforeCall(UpdateTicket json, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling ticketUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketUpdateCall(json, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Принимает номер тикета и параметры
     * Возвращает JSON объект из 2 полей с номером тикета при успехе
     * @param json данные тикета, которые нужно изменить (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ticketUpdate(UpdateTicket json) throws ApiException {
        ticketUpdateWithHttpInfo(json);
    }

    /**
     * Принимает номер тикета и параметры
     * Возвращает JSON объект из 2 полей с номером тикета при успехе
     * @param json данные тикета, которые нужно изменить (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ticketUpdateWithHttpInfo(UpdateTicket json) throws ApiException {
        com.squareup.okhttp.Call call = ticketUpdateValidateBeforeCall(json, null, null);
        return apiClient.execute(call);
    }

    /**
     * Принимает номер тикета и параметры (asynchronously)
     * Возвращает JSON объект из 2 полей с номером тикета при успехе
     * @param json данные тикета, которые нужно изменить (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketUpdateAsync(UpdateTicket json, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketUpdateValidateBeforeCall(json, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
